{"version":3,"sources":["offices.js"],"names":["Office","req","res","officeValidator","body","error","send","status","details","message","office","id","offices","length","type","name","push","data","find","of","parseInt","params","schema","Joi","string","min","max","required","logoUrl","options","language","key","validate"],"mappings":";;;;;;;;AACA;;;;AACA;;;;;;;;IAGMA,M;;;;;;;;;AAEF;qCACoBC,G,EAAKC,G,EAAK;AAAA,mCAItBC,gBAAgBF,IAAIG,IAApB,CAJsB;AAAA,gBAGtBC,KAHsB,oBAGtBA,KAHsB;;AAM1B,gBAAIA,KAAJ,EAAW,OAAOH,IAAII,IAAJ,CAAS;AACvBC,wBAAQ,GADe;AAEvBF,uBAAOA,MAAMG,OAAN,CAAc,CAAd,EAAiBC;AAFD,aAAT,CAAP;;AAKX,gBAAMC,SAAS;AACXC,oBAAIC,iBAAQC,MAAR,GAAiB,CADV;AAEXC,sBAAMb,IAAIG,IAAJ,CAASU,IAFJ;AAGXC,sBAAMd,IAAIG,IAAJ,CAASW;AAHJ,aAAf;AAKAH,6BAAQI,IAAR,CAAaN,MAAb;AACAR,gBAAII,IAAJ,CAAS;AACLC,wBAAQ,GADH;AAELU,sBAAML;AAFD,aAAT;AAIH;;;sCAEoBX,G,EAAKC,G,EAAI;AAC1B,mBAAOA,IAAII,IAAJ,CAAS;AACZC,wBAAQ,GADI;AAEZU,sBAAML;AAFM,aAAT,CAAP;AAIH;;;qCAEmBX,G,EAAKC,G,EAAI;AACzB,gBAAMQ,SAASE,iBAAQM,IAAR,CAAa;AAAA,uBAAMC,GAAGR,EAAH,KAAUS,SAASnB,IAAIoB,MAAJ,CAAWV,EAApB,CAAhB;AAAA,aAAb,CAAf;AACA,gBAAG,CAACD,MAAJ,EAAW;AACP,uBAAOR,IAAII,IAAJ,CAAS;AACZC,4BAAQ,GADI;AAEZF,gDAA0BJ,IAAIoB,MAAJ,CAAWV,EAArC;AAFY,iBAAT,CAAP;AAIH;;AAEDT,gBAAII,IAAJ,CAAS;AACLC,wBAAQ,GADH;AAELU,sBAAM,CAACP,MAAD;AAFD,aAAT;AAIH;;;;;;AAIL,SAASP,eAAT,CAAyBO,MAAzB,EAAiC;AAC7B,QAAMY,SAAS;AACXR,cAAMS,cAAIC,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,EAAxB,EAA4BC,QAA5B,EADK;AAEXZ,cAAMQ,cAAIC,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,EAAxB,EAA4BC,QAA5B,EAFK;AAGXC,iBAASL,cAAIC,MAAJ,GAAaG,QAAb;AAHE,KAAf;;AAMA,QAAME,UAAU;AACZC,kBAAU;AACNC,iBAAK;AADC;AADE,KAAhB;;AAMA,WAAOR,cAAIS,QAAJ,CAAatB,MAAb,EAAqBY,MAArB,EAA6BO,OAA7B,CAAP;AACH;;kBAGc7B,M","file":"offices.js","sourceRoot":"/home/moise/Self-Build/JSCourse/Politico/SERVER/controllers","sourcesContent":["\nimport Joi from 'joi'; \nimport offices from '../models/office'; \n\n\nclass Office{\n    \n    // Create office\n    static createOffice(req, res) {\n\n        const {\n            error\n        } = officeValidator(req.body);\n\n        if (error) return res.send({\n            status: 404,\n            error: error.details[0].message\n        })\n\n        const office = {\n            id: offices.length + 1,\n            type: req.body.type,\n            name: req.body.name\n        };\n        offices.push(office);\n        res.send({\n            status: 200,\n            data: offices\n        });\n    }\n\n    static getAllOffices(req, res){\n        return res.send({\n            status: 200, \n            data: offices\n        });\n    }\n\n    static getOneOffice(req, res){\n        const office = offices.find(of => of.id === parseInt(req.params.id)); \n        if(!office){\n            return res.send({\n                status: 404, \n                error: `Office with ID  ${req.params.id} is not found!`\n            });\n        }\n\n        res.send({\n            status: 200, \n            data: [office]\n        });\n    }\n\n}\n\nfunction officeValidator(office) {\n    const schema = {\n        type: Joi.string().min(3).max(10).required(),\n        name: Joi.string().min(3).max(10).required(),\n        logoUrl: Joi.string().required(),\n    };\n\n    const options = {\n        language: {\n            key: '{{key}} '\n        }\n    }\n\n    return Joi.validate(office, schema, options);\n}\n\n\nexport default Office;\n\n"]}