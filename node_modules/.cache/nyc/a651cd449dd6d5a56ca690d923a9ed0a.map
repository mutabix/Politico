{"version":3,"sources":["parties.js"],"names":["Party","req","res","partyValidator","body","error","send","status","details","message","party","id","parties","length","name","hqAddress","logoUrl","push","data","find","p","parseInt","params","index","indexOf","splice","schema","Joi","string","min","max","required","options","language","key","validate"],"mappings":"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","file":"parties.js","sourceRoot":"/home/moise/Self-Build/JSCourse/Politico/SERVER/controllers","sourcesContent":["import Joi from 'joi';\nimport parties from '../models/parties';\nclass Party {\n\n    // Create a party\n    static createParty(req, res) {\n\n        const {\n            error\n        } = partyValidator(req.body);\n\n        if (error) return res.send({\n            status: 404,\n            error: error.details[0].message\n        })\n\n        const party = {\n            id: parties.length + 1,\n            name: req.body.name,\n            hqAddress: req.body.hqAddress,\n            logoUrl: req.body.logoUrl\n        };\n        parties.push(party);\n        res.send({\n            status: 200,\n            data: parties\n        });\n    }\n\n    // Get all Parties \n\n    static getAllParties(req, res) {\n        res.send({\n            status: 200, \n            data: parties\n\n        });\n    }\n\n\n    // Get one party\n    static getOneParty(req, res) {\n        const party = parties.find(p => p.id === parseInt(req.params.id));\n        if (!party) return res.send({\n                status: 404,\n                error: `Party with ID ${req.params.id} is not found!`\n            });\n        res.send({\n            status: 200,\n            data: [party]\n        })\n        \n\n    }\n\n\n    static updateParty(req, res) {\n\n        const party = parties.find(p => p.id === parseInt(req.params.id));\n        if (!party) {\n            return res.send({\n                status: 404,\n                error: `Party with  id ${req.params.id} is not found!`\n            });\n        }\n\n        //Update Party\n\n        const {\n            error\n        } = partyValidator(req.body);\n        if (error) return res.send({\n            status: 404,\n            error: error.details[0].message\n        })\n\n        party.name = req.body.name;\n        party.hqAddress = req.body.hqAddress;\n        party.logoUrl = req.body.logoUrl;\n\n        res.send({\n            status: 200,\n            data: [party]\n        });\n    }\n\n    static deleteParty(req, res) {\n      \n        const party = parties.find(p => p.id === parseInt(req.params.id));\n            if (!party) return res.send({\n                    status: 404, \n                    error: `Party with ID ${req.params.id} is not found!`\n                });\n        \n            const index = parties.indexOf(party);\n            parties.splice(index, 1);\n            res.send({\n                status: 200, \n                data: parties\n            });\n    }\n    \n\n}\n\nfunction partyValidator(party) {\n    const schema = {\n        name: Joi.string().min(3).max(10).required(),\n        hqAddress: Joi.string().min(3).max(10).required(),\n        logoUrl: Joi.string().required(),\n    };\n\n    const options = {\n        language: {\n            key: '{{key}} '\n        }\n    }\n\n    return Joi.validate(party, schema, options);\n}\n    \nexport default Party;"]}